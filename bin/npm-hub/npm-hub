import glob from 'glob';
import terser from 'terser';
import bundle from 'webpack';
import { argv, exit } from 'process';
import { LINE, UTF, newDateWithMagenta } from './general.js';
import { readFileSync, writeFileSync } from 'fs';
import { resolve, resolve as r } from 'path';

// -------------- Fix --------------
const { sync } = glob;
const { minify } = terser;
const [__dirname, dir] = [, ,].fill(resolve());

const BUNDLE_FILE_NAME = 'bundle.js';
const ERR = '`argv` are invalid!';

class VerHandling {
  static Verify(argv) {
    if (argv.find(x => x === 'v' || x === '--v')) { // `v` Might be Temp
      const readFile = readFileSync('./package.json', UTF);
      const { version: v } = JSON.parse(readFile);
      console.log(`v` + v);

      exit();
    }
  }
}

class TypeHandling {
  static Verify(argv) {
    if (!argv) throw new Error(ERR);

    const type = argv.find(x => x.startsWith('--type='));

    if (!type) throw new Error(ERR);

    return type.replace('--type=', '');
  }
}

// ...

VerHandling.Verify(argv);
const type = TypeHandling.Verify(argv);
const allJ = sync('./dist/*.js');

// ...

const finalizeFn = () => console.log(LINE, 'END  ', newDateWithMagenta(), LINE);

const pathFile = (path, filename) => ({ path: r(dir, path), filename });

const minifyFn = () => {
  const filterAllJ = allJ.filter(x => !x.includes(BUNDLE_FILE_NAME))
    .filter(x => !x.endsWith('.spec.js'));

  filterAllJ.forEach(x => {
    const readFile = minify(readFileSync(x, UTF), {}).code;

    writeFileSync(x, readFile, UTF);
  });

  finalizeFn();
};

const bundleFn = type => {
  const igniteFn = prepareBundle => prepareBundle.run(_ => finalizeFn());

  switch (type) {
    case 'bundle': {
      const entry = allJ.filter(x => !x.endsWith('.spec.js'));

      const prepareBundle = bundle({
        mode: 'production',
        entry,
        output: {
          ...pathFile('bundle', BUNDLE_FILE_NAME),
          library: 'ntn_try_me',
          libraryTarget: 'var'
        }
      });

      return igniteFn(prepareBundle);
    }
    case 'bundleDev': {
      const entry = allJ.filter(x => !x.includes(BUNDLE_FILE_NAME));

      const prepareBundle = bundle({
        mode: 'production',
        entry,
        output: {
          ...pathFile('dist/dev', BUNDLE_FILE_NAME),
          library: 'ntn_try_me',
          libraryTarget: 'var'
        }
      });

      return igniteFn(prepareBundle);
    }
  }
};

// ...

console.log(LINE, 'BEGIN', newDateWithMagenta(), LINE);

switch (type) {
  case 'minify':
    minifyFn();
    break;
  case 'bundle':
  case 'bundleDev':
    bundleFn(type);
    break;
  default:
    throw new Error(ERR);
}
